{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/scroll.js","containers/App.js","reducres.jsx","index.js","constants.jsx"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","console","log","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","initialStateSearch","searchField","store","createLogger","createStore","action","Object","assign","payload","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oCCHSC,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC3B,OACC,yBAAKC,UAAY,yCAChB,yBAAKC,IAAG,+BAA4BF,EAA5B,cACR,6BACC,4BAAKF,GACL,2BAAIC,MCcOI,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BAEGA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACA,kBAAC,EAAD,CACCC,IAAOD,EACPP,GAAMI,EAAOG,GAAGP,GAChBF,KAAQM,EAAOG,GAAGT,KAClBC,MAASK,EAAOG,GAAGR,aCEXU,EAbG,SAAC,GAAiC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACC,yBAAKV,UAAY,OACjB,2BACCA,UAAY,mCACZW,KAAO,SACPC,YAAc,QACdC,SAAYH,MCEAI,EATA,SAACC,GAEf,OACC,yBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACrEJ,EAAMK,WC0CKC,G,wDAzCd,aAAe,IAAD,8BACb,gBAcDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAdzC,EAAKC,MAAQ,CACXxB,OAAQ,GACRM,YAAa,IAEfmB,QAAQC,IAAI,eANC,E,gEASO,IAAD,OACnBC,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACrB,OAAQ+B,S,+BAQ5B,IAAD,OACFC,EAAiBC,KAAKT,MAAMxB,OAAOkC,QAAQ,SAAAlC,GACjD,OAAOA,EAAON,KAAKyC,cAAcC,SAAS,EAAKZ,MAAMlB,YAAY6B,kBAElE,OAAiC,IAA7BF,KAAKT,MAAMxB,OAAOqC,OAEd,yCAGP,yBAAKxC,UAAY,MAChB,wBAAIA,UAAY,OAAhB,iBACA,kBAAC,EAAD,CAAWU,aAAgB0B,KAAKd,iBAChC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAWnB,OAAUgC,U,GAlCPM,cCEZC,G,MAAqB,CAC1BC,YAAa,KCIRC,GADSC,yBACDC,aDAc,WAC3B,IAD4BnB,EAC7B,uDADoCe,EAAoBK,EACxD,uDADiE,GAEhE,OAAOA,EAAOpC,MACb,IEhBiC,sBFiBhC,OAAOqC,OAAOC,OAAO,GAAItB,EAAO,CAACgB,YAAaI,EAAOG,UACtD,QACC,OAAOvB,KCN8BwB,YAAgBC,OAGxDC,IAASC,OACL,kBAAC,IAAD,CAAUV,MAAQA,GACjB,kBAAC,EAAD,OACYW,SAASC,eAAe,SPgHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.ded27efc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = ({name, email, id}) => {\n\treturn (\n\t\t<div className = 'tc bg-light-blue dib br3 pa3 ma2 grow'>\n\t\t\t<img src = {`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div> \n\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\treturn(\n\t\t<div>\n\t\t \t{\n\t\t \t\trobots.map((user, i) => {\n\t\t \t\t\treturn (\t\t\n\t\t \t\t\t<Card \n\t\t \t\t\t\tkey = {i} \n\t\t \t\t\t\tid = {robots[i].id} \n\t\t \t\t\t\tname = {robots[i].name} \n\t\t \t\t\t\temail = {robots[i].email}\n\t\t \t\t\t\t/>\n\t\t \t\t\t\t);\n\t\t \t\t\t})\n\t\t \t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange }) => {\n\treturn (\n\t\t<div className = 'pa2'>\n\t\t<input \n\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\n\t\t\ttype = 'search' \n\t\t\tplaceholder = 'robot' \n\t\t\tonChange = {searchChange}/>\n\n\t\t</div>\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>\n{\n\treturn (\n\t\t<div style = {{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t\t)\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/scroll';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\t\trobots: [],\n\t\t\t\tsearchfield: ''\n\t\t}\n\t\tconsole.log('constructor');\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('http://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(users => this.setState({robots: users}));\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchfield: event.target.value})\n\n\t}\n\n\trender () {\n\t\t\tconst filteredRobots = this.state.robots.filter( robots  => {\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t})\n\t\tif (this.state.robots.length === 0)\n\t\t{\n\t\t\treturn <h1> Loading </h1>\n\t\t} else {\n\t\treturn (\n\t\t\t<div className = 'tc'>\n\t\t\t\t<h1 className = 'f1s' >Robo Friends </h1>\n\t\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t<CardList  robots = {filteredRobots} />\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n\t}\n}\n\nexport default App;","import {\n\tCHANGE_SEARCH_FIELD, \n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED} \nfrom './constants.jsx';\n\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\n\nexport const searchRobots = (state= initialStateSearch, action = {}) =>\n{\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\n\nconst initialStateRobots =\n{\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots =  (state = initialStateRobots, action = {}) =>\n{\n\tswitch(action.type)\n\t{\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, {isPending: true})\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false})\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false})\n\t\tdefault:\n\t\t\treturn state\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider, connect} from 'react-redux';\nimport { createLogger} from 'redux-logger';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport 'tachyons';\nimport { searchRobots } from './reducres';\n\nconst logger = createLogger();\nconst store = createStore(searchRobots, applyMiddleware(thunkMiddleware));\n\n\nReactDOM.render(\n\t\t\t\t<Provider store= {store} >\n\t\t\t\t\t<App /> \n\t\t\t\t</Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING= 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS= 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED= 'REQUEST_ROBOTS_FAILED';\n\n"],"sourceRoot":""}